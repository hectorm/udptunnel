name: 'Main'

on:
  push:
    tags: ['*']
    branches: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:

permissions: {}

jobs:

  build:
    name: 'Build'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    container: 'docker.io/alpine:latest'
    steps:
      - name: 'Install packages'
        run: 'apk add --no-cache build-base pkgconf'
      - name: 'Checkout'
        uses: 'actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8'
      - name: 'Build'
        run: |
          make all STATIC=1
          strip -s ./udptunnel
          ./udptunnel --help
      - name: 'Upload artifacts'
        uses: 'actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce'
        with:
          name: 'dist'
          path: './udptunnel'
          retention-days: 1

  release-github:
    name: 'Create GitHub release'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: ['build']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
    steps:
      - name: 'Download artifacts'
        uses: 'actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7'
        with:
          name: 'dist'
      - name: 'Create release'
        env:
          GITHUB_PAT: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          RELEASE_STATUS="$(curl -fs --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases/tags/${GITHUB_REF_NAME:?}" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --write-out '%{http_code}' --output /dev/null ||:)"
          if [ "${RELEASE_STATUS:?}" = '200' ]; then exit 0; fi
          RELEASE_ID="$(curl -fsS --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --data "$(jq -rn --arg tag "${GITHUB_REF_NAME:?}" '{"name": $tag, "tag_name": $tag, "generate_release_notes": true}')" | jq -r '.id')"
          if [ -z "${RELEASE_ID-}" ] || [ "${RELEASE_ID:?}" = 'null' ]; then exit 1; fi
          for asset in ./*; do
            [ -f "${asset:?}" ] || continue
            encodedAssetName="$(jq -rn --arg v "$(basename "${asset:?}")" '$v|@uri')"
            curl -fsS --proto '=https' --tlsv1.3 --globoff \
              --url "https://uploads.github.com/repos/${GITHUB_REPOSITORY:?}/releases/${RELEASE_ID:?}/assets?name=${encodedAssetName:?})" \
              --header "Authorization: Bearer ${GITHUB_PAT:?}" \
              --header 'Accept: application/vnd.github.v3+json' \
              --header 'Content-Type: application/octet-stream' \
              --data-binary "@${asset:?}" --output /dev/null
          done
